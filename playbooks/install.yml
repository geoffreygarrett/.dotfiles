---
- name: Terminal setup for Linux and macOS
  hosts: localhost
  become: yes
  vars:
    gg_dir: "{{ ansible_env.HOME }}/.gg"
    install_log: "{{ gg_dir }}/install_log.txt"
    backup_dir: "{{ gg_dir }}/backup_{{ ansible_date_time.iso8601 }}"
    repo_dir: "{{ playbook_dir }}/.."
    packages_linux:
      - alacritty
      - neovim
      - curl
      - build-essential
      - unzip
      - wmctrl
    packages_macos:
      - alacritty
      - neovim
      - unzip
      - wmctrl
    font_url: "https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/JetBrainsMono.zip"
    font_dir: "/usr/local/share/fonts/JetBrainsMono"

  tasks:
    - name: Ensure .gg directory exists
      file:
        path: "{{ gg_dir }}"
        state: directory
        mode: '0700'

    - name: Ensure log file exists
      file:
        path: "{{ install_log }}"
        state: touch
        mode: '0600'

    - name: Backup existing configuration
      command: >
        cp -r {{ item }} {{ backup_dir }}/{{ item | basename }}
      loop:
        - "{{ ansible_env.HOME }}/.config/alacritty"
        - "{{ ansible_env.HOME }}/.config/zellij"
        - "{{ ansible_env.HOME }}/.config/nvim"
        - "{{ ansible_env.HOME }}/.config/nushell"
      ignore_errors: yes
      when: ansible_os_family == 'Linux' or ansible_os_family == 'Darwin'

    - name: Install packages (Linux)
      apt:
        name: "{{ packages_linux }}"
        state: present
      when: ansible_os_family == "Debian"

    - name: Install packages (macOS)
      homebrew:
        name: "{{ packages_macos }}"
        state: present
      when: ansible_os_family == "Darwin"

    - name: Install Rust
      shell: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source {{ ansible_env.HOME }}/.cargo/env
        rustup component add rust-analyzer
      args:
        creates: "{{ ansible_env.HOME }}/.cargo/bin/rustc"
      when: ansible_os_family == "Darwin" or ansible_os_family == "Linux"

    - name: Install Zellij
      shell: "{{ ansible_env.HOME }}/.cargo/bin/cargo install --locked zellij"
      args:
        creates: "{{ ansible_env.HOME }}/.cargo/bin/zellij"

    - name: Ensure vim-plug directory exists
      file:
        path: "{{ ansible_env.HOME }}/.local/share/nvim/site/autoload"
        state: directory
        mode: '0755'

    - name: Download vim-plug
      get_url:
        url: "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
        dest: "{{ ansible_env.HOME }}/.local/share/nvim/site/autoload/plug.vim"
        mode: '0644'

    - name: Create minimal init.vim for vim-plug
      copy:
        dest: "{{ ansible_env.HOME }}/.config/nvim/init.vim"
        content: |
          call plug#begin()
          " Plugins go here
          Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
          call plug#end()
      when: ansible_os_family == "Darwin" or ansible_os_family == "Linux"

    - name: Install LazyVim
      git:
        repo: "https://github.com/folke/lazy.nvim.git"
        dest: "{{ ansible_env.HOME }}/.config/nvim/lazy/lazy.nvim"
      when: ansible_os_family == "Darwin" or ansible_os_family == "Linux"

    - name: Create symlinks for configuration
      file:
        src: "{{ repo_dir }}/config/{{ item }}"
        dest: "{{ ansible_env.HOME }}/.config/{{ item }}"
        state: link
      loop:
        - alacritty
        - zellij
        - nvim
        - nushell
      when: ansible_os_family == "Darwin" or ansible_os_family == "Linux"

    - name: Install Neovim plugins
      shell: |
        nvim --headless +PlugInstall +qall
        nvim --headless +TSUpdate +qall
      args:
        creates: "{{ ansible_env.HOME }}/.local/share/nvim/plugged"

    - name: Install JetBrains Mono Nerd Font
      unarchive:
        src: "{{ font_url }}"
        dest: "/tmp/"
        remote_src: yes
        creates: "{{ font_dir }}"
      when: ansible_os_family == "Darwin" or ansible_os_family == "Linux"

    - name: Move font files to font directory
      shell: |
        mkdir -p {{ font_dir }}
        cp -r /tmp/JetBrainsMono/* {{ font_dir }}
      when: ansible_os_family == "Darwin" or ansible_os_family == "Linux"

    - name: Update font cache
      shell: "fc-cache -fv"
      when: ansible_os_family == "Darwin" or ansible_os_family == "Linux"

    - name: Install Nushell via Cargo
      shell: "{{ ansible_env.HOME }}/.cargo/bin/cargo install nu"
      args:
        creates: "{{ ansible_env.HOME }}/.cargo/bin/nu"
      when: ansible_os_family == "Debian" and ansible_env.HOME is defined

    - name: Install Nushell (macOS)
      homebrew:
        name: "nushell"
        state: present
      when: ansible_os_family == "Darwin"

    - name: Confirm installation complete
      debug:
        msg: "Installation completed successfully! Please restart your terminal for changes to take effect."
