=== dev_tools.yml ===
---
- name: Update Rust
  shell: rustup update

- name: Update Zellij
  shell: cargo install zellij

- name: Update Neovim plugins
  shell: |
    nvim --headless +"if exists(':PlugUpdate') | PlugUpdate | else | echo 'vim-plug not installed' | endif" +qall
    nvim --headless +"if exists(':PlugUpgrade') | PlugUpgrade | else | echo 'vim-plug not installed' | endif" +qall
    nvim --headless +"if exists(':TSUpdate') | TSUpdate | else | echo 'Treesitter not installed' | endif" +qall
  when: ansible_os_family != 'Windows'

=== keybindings.yml ===
---
- name: Setup keybinding (Linux)
  shell: |
    for i in "${!KEYBINDINGS_LINUX[@]}"; do
      KEYBINDING="{{ item }}"
      binding=$(echo $KEYBINDING | cut -d':' -f1)
      name=$(echo $KEYBINDING | cut -d':' -f2)
      command=$(echo $KEYBINDING | cut -d':' -f3)
      keybinding_path="/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom$i/"
      gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:$keybinding_path name "$name"
      gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:$keybinding_path command "$command"
      gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:$keybinding_path binding "$binding"
    done
    gsettings set org.gnome.settings-daemon.plugins.media-keys custom-keybindings "[$(printf "'%s', " "${keybinding_paths[@]}")]"
  loop: "{{ keybindings_linux }}"
  when: ansible_os_family == "Linux"

- name: Setup keybinding (macOS)
  shell: |
    binding=$(echo {{ item }} | cut -d':' -f1)
    name=$(echo {{ item }} | cut -d':' -f2)
    defaults write -g NSUserKeyEquivalents -dict-add "$name" "$binding"
  loop: "{{ keybindings_macos }}"
  when: ansible_os_family == "Darwin"

=== packages.yml ===
---
- name: Install common packages (Debian/Ubuntu)
  apt:
    name: "{{ packages_common + packages_specific }}"
    state: latest
    update_cache: yes
  become: yes
  when: ansible_os_family == "Debian"

- name: Add Alacritty PPA (Ubuntu)
  apt_repository:
    repo: ppa:aslatter/ppa
  become: yes
  when: ansible_distribution == "Ubuntu"

- name: Install Alacritty (Ubuntu)
  apt:
    name: alacritty
    state: latest
    update_cache: yes
  become: yes
  when: ansible_distribution == "Ubuntu"

- name: Install common packages (Fedora)
  dnf:
    name: "{{ packages_common + packages_specific + ['alacritty'] }}"
    state: latest
  become: yes
  when: ansible_distribution == "Fedora"

- name: Install common packages (CentOS)
  yum:
    name: "{{ packages_common + packages_specific }}"
    state: latest
  become: yes
  when: ansible_distribution == "CentOS"

- name: Install Alacritty from source (CentOS)
  block:
    - name: Install Rust
      shell: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - name: Install Alacritty dependencies
      yum:
        name:
          - cmake
          - freetype-devel
          - fontconfig-devel
          - libxcb-devel
    - name: Clone Alacritty repository
      git:
        repo: 'https://github.com/alacritty/alacritty.git'
        dest: /tmp/alacritty
    - name: Build and install Alacritty
      shell: |
        cd /tmp/alacritty
        cargo build --release
        cp target/release/alacritty /usr/local/bin/
  become: yes
  when: ansible_distribution == "CentOS"

- name: Install or Update packages (macOS)
  homebrew:
    name: "{{ packages_macos }}"
    state: latest
    update_homebrew: yes
  when: ansible_os_family == "Darwin"

- name: Install or Update packages (Windows)
  win_chocolatey:
    name: "{{ packages_windows }}"
    state: latest
  when: ansible_os_family == "Windows"

=== setup_directories.yml ===
---
- name: Ensure .gg directory exists with correct permissions
  file:
    path: "{{ gg_dir }}"
    state: directory
    mode: '0755'

- name: Ensure backup directory exists
  file:
    path: "{{ backup_dir }}"
    state: directory
    mode: '0755'

- name: Ensure log file exists
  file:
    path: "{{ install_log }}"
    state: touch
    mode: '0644'
  when: ansible_os_family != 'Windows'

- name: Ensure .config directory exists
  file:
    path: "{{ ansible_env.HOME }}/.config"
    state: directory
    mode: '0755'
  when: ansible_os_family != 'Windows'

- name: Backup existing configuration
  copy:
    src: "{{ ansible_env.HOME }}/.config/{{ item }}"
    dest: "{{ backup_dir }}/{{ item }}"
    remote_src: yes
  loop: [ alacritty, zellij, nvim, nushell ]
  ignore_errors: yes



=== update_configs.yml ===

- name: Update repository
  git:
    repo: "{{ repo_dir }}"
    dest: "{{ repo_dir }}"
    update: yes

- name: Update configurations
  copy:
    src: "{{ repo_dir }}/config/{{ item }}/"
    dest: "{{ ansible_env.HOME }}/.config/{{ item }}/"
    remote_src: yes
  loop: [ alacritty, zellij, nvim, nushell ]
  when: ansible_os_family != 'Windows'

- name: Fix permissions for configuration files
  file:
    path: "{{ ansible_env.HOME }}/.config/{{ item }}"
    state: directory
    recurse: yes
    owner: "{{ ansible_env.USER }}"
    group: "{{ ansible_env.USER }}"
    mode: '0755'
  loop: [ alacritty, zellij, nvim, nushell ]
  when: ansible_os_family != 'Windows'




